{"version":3,"file":"static/js/2999.16056eb5.chunk.js","mappings":"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","sources":["../node_modules/invariant/browser.js","experiment-tracking/components/experiment-page/hooks/useInferExperimentKind.tsx","experiment-tracking/components/traces/hooks/useExperimentContainsTraces.tsx","experiment-tracking/components/traces/hooks/useExperimentContainsTrainingRuns.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewInferredKindPopover.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderKindSelector.tsx","common/utils/MarkdownUtils.ts","experiment-tracking/components/experiment-page/components/header/ExperimentViewInferredKindModal.tsx","experiment-tracking/components/experiment-page/components/header/tab-selector-bar/TabSelectorBarConstants.tsx","experiment-tracking/components/experiment-page/components/header/tab-selector-bar/TabSelectorBar.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderV2.tsx","experiment-tracking/components/experiment-page/hooks/useGetExperimentPageActiveTabByRoute.tsx","shared/building_blocks/PreviewBadge.tsx","shared/building_blocks/CopyBox.tsx","experiment-tracking/components/modals/GetLinkModal.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentGetShareLinkModal.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderShareButton.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewArtifactLocation.tsx","common/utils/StringUtils.ts","experiment-tracking/components/experiment-page/hooks/useExperimentPageViewMode.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeader.tsx","shared/building_blocks/CopyButton.tsx","experiment-tracking/components/experiment-page/hooks/useUpdateExperimentKind.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewDescriptionNotes.tsx","experiment-tracking/hooks/useExperimentQuery.tsx","shared/building_blocks/PageHeader.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyTitle.tsx","shared/web-shared/utils/coerceToEnum.ts","shared/web-shared/utils/unified-details/useResponsiveContainer.ts","shared/web-shared/utils/unified-details/index.tsx","experiment-tracking/utils/ExperimentKindUtils.ts","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyArtifactLocation.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyExperimentId.tsx"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useExperimentContainsTraces } from '../../traces/hooks/useExperimentContainsTraces';\nimport { ExperimentKind, ExperimentPageTabName } from '../../../constants';\nimport { useExperimentContainsTrainingRuns } from '../../traces/hooks/useExperimentContainsTrainingRuns';\nimport { isEditableExperimentKind } from '../../../utils/ExperimentKindUtils';\n\nexport const useInferExperimentKind = ({\n  experimentId,\n  isLoadingExperiment,\n  enabled = true,\n  experimentTags,\n  updateExperimentKind,\n}: {\n  experimentId?: string;\n  isLoadingExperiment: boolean;\n  enabled?: boolean;\n  experimentTags?: { key?: string | null; value?: string | null }[] | null;\n  updateExperimentKind: (params: { experimentId: string; kind: ExperimentKind }) => void;\n}) => {\n  const { containsTraces, isLoading: isTracesBeingDetermined } = useExperimentContainsTraces({\n    experimentId,\n    enabled,\n  });\n\n  const [isDismissed, setIsDismissed] = useState(false);\n\n  const { containsRuns, isLoading: isTrainingRunsBeingDetermined } = useExperimentContainsTrainingRuns({\n    experimentId,\n    enabled,\n  });\n\n  const isLoading = enabled && (isLoadingExperiment || isTracesBeingDetermined || isTrainingRunsBeingDetermined);\n\n  const inferredExperimentKind = useMemo(() => {\n    if (!enabled || isLoading || isDismissed) {\n      return undefined;\n    }\n    if (containsTraces) {\n      return ExperimentKind.GENAI_DEVELOPMENT_INFERRED;\n    }\n    if (containsRuns) {\n      return ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED;\n    }\n    return ExperimentKind.NO_INFERRED_TYPE;\n  }, [\n    // prettier-ignore\n    enabled,\n    isDismissed,\n    isLoading,\n    containsTraces,\n    containsRuns,\n  ]);\n\n  const inferredExperimentPageTab = useMemo(() => {\n    if (inferredExperimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED) {\n      return ExperimentPageTabName.Traces;\n    }\n    if (inferredExperimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED) {\n      return ExperimentPageTabName.Runs;\n    }\n    return undefined;\n  }, [inferredExperimentKind]);\n\n  // automatically update the experiment type if it's not user-editable\n  useEffect(() => {\n    if (inferredExperimentKind && !isEditableExperimentKind(inferredExperimentKind)) {\n      updateExperimentKind({ experimentId: experimentId ?? '', kind: inferredExperimentKind });\n    }\n  }, [experimentId, inferredExperimentKind, updateExperimentKind]);\n\n  return {\n    isLoading,\n    inferredExperimentKind,\n    inferredExperimentPageTab,\n    dismiss: () => setIsDismissed(true),\n  };\n};\n","import { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { isEmpty } from 'lodash';\nimport invariant from 'invariant';\n\nconst QUERY_KEY = 'EXPERIMENT_CONTAINS_TRACES';\n\n/**\n * Hook for checking if there are any traces for a given experiment.\n * Returns `containsTraces` set to `true` if there's at least one trace, `false` otherwise.\n */\nexport const useExperimentContainsTraces = ({\n  experimentId,\n  enabled,\n}: {\n  experimentId?: string;\n  enabled?: boolean;\n}) => {\n  const { data, isLoading } = useQuery(\n    [QUERY_KEY, experimentId],\n    async () => {\n      invariant(experimentId, 'experimentId is required');\n      const experimentIds = [experimentId];\n\n      return MlflowService.getExperimentTraces(experimentIds, 'timestamp_ms DESC', undefined, undefined, 1);\n    },\n    {\n      enabled: enabled && Boolean(experimentId),\n    },\n  );\n\n  const containsTraces = !isLoading && !isEmpty(data?.traces);\n  return {\n    containsTraces,\n    isLoading: isLoading && enabled && Boolean(experimentId),\n  };\n};\n","import { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { isEmpty } from 'lodash';\nimport invariant from 'invariant';\nimport { useMemo } from 'react';\n\nconst QUERY_KEY = 'EXPERIMENT_CONTAINS_TRAINING_RUNS';\n\n/**\n * Hook for checking if there are any runs in a given experiment.\n * Returns `containsRuns` set to `true` if there's at least one run, `false` otherwise.\n */\nexport const useExperimentContainsTrainingRuns = ({\n  experimentId,\n  enabled,\n}: {\n  experimentId?: string;\n  enabled?: boolean;\n}) => {\n  const { data, isLoading, error } = useQuery(\n    [QUERY_KEY, experimentId],\n    async () => {\n      invariant(experimentId, 'experimentId is required');\n      const experimentIds = [experimentId];\n\n      const ret = await MlflowService.searchRuns({\n        experiment_ids: experimentIds,\n        max_results: 1,\n      });\n\n      return ret;\n    },\n    {\n      enabled: Boolean(experimentId) && enabled,\n    },\n  );\n\n  const containsRuns = useMemo(() => !isLoading && !isEmpty(data?.runs), [isLoading, data]);\n\n  return {\n    containsRuns,\n    isLoading: isLoading && enabled && Boolean(experimentId),\n  };\n};\n","import { Button, CloseIcon, Popover, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ExperimentKind } from '../../../../constants';\nimport { ExperimentKindDropdownLabels, ExperimentKindShortLabels } from '../../../../utils/ExperimentKindUtils';\n\nexport const ExperimentViewInferredKindPopover = ({\n  children,\n  inferredExperimentKind,\n  onConfirm,\n  onDismiss,\n  isInferredKindEditable = false,\n}: {\n  children: React.ReactNode;\n  inferredExperimentKind: ExperimentKind;\n  onConfirm?: () => void;\n  onDismiss?: () => void;\n  isInferredKindEditable?: boolean;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'block', position: 'relative' }}>\n      {children}\n      <Popover.Root componentId=\"mlflow.experiment_view.header.experiment_kind_inference_popover\" open modal={false}>\n        <Popover.Trigger asChild>\n          <div css={{ position: 'absolute', left: 0, bottom: 0, right: 0, height: 0 }} />\n        </Popover.Trigger>\n        <Popover.Content css>\n          <Popover.Arrow />\n          <div css={{ display: 'flex', alignItems: 'flex-start', gap: theme.spacing.sm }}>\n            <div css={{ flex: 1 }}>\n              <Typography.Paragraph css={{ maxWidth: 300 }}>\n                <FormattedMessage\n                  defaultMessage=\"We've automatically detected the experiment type to be ''{kindLabel}''. {isEditable, select, true {You can either confirm or change the type.} other {}}\"\n                  description=\"Popover message for inferred experiment kind\"\n                  values={{\n                    kindLabel: intl.formatMessage(ExperimentKindShortLabels[inferredExperimentKind]),\n                    isEditable: isInferredKindEditable,\n                  }}\n                />\n              </Typography.Paragraph>\n              <Button\n                componentId=\"mlflow.experiment_view.header.experiment_kind_inference_popover.confirm\"\n                onClick={onConfirm}\n                type=\"primary\"\n                size=\"small\"\n              >\n                <FormattedMessage\n                  defaultMessage=\"Confirm\"\n                  description=\"Button label to confirm the inferred experiment kind\"\n                />\n              </Button>\n            </div>\n            <Button\n              componentId=\"mlflow.experiment_view.header.experiment_kind_inference_popover.dismiss\"\n              onClick={onDismiss}\n              icon={<CloseIcon />}\n              size=\"small\"\n            />\n          </div>\n        </Popover.Content>\n      </Popover.Root>\n    </div>\n  );\n};\n","import { ChevronDownIcon, DropdownMenu, Popover, Spinner, Tag, Tooltip } from '@databricks/design-system';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { entries } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { defineMessage, FormattedMessage } from 'react-intl';\nimport { ExperimentKind } from '../../../../constants';\nimport {\n  ExperimentKindDropdownLabels,\n  getSelectableExperimentKinds,\n  isEditableExperimentKind,\n  normalizeInferredExperimentKind,\n} from '../../../../utils/ExperimentKindUtils';\nimport { ExperimentViewInferredKindPopover } from './ExperimentViewInferredKindPopover';\n\nconst getVisibleLabel = (kind: ExperimentKind, readOnly: boolean) => {\n  if (kind === ExperimentKind.NO_INFERRED_TYPE || kind === ExperimentKind.EMPTY) {\n    if (readOnly) {\n      // if the user does not have permission to edit the experiment kind, we show the \"None\" label\n      return ExperimentKindDropdownLabels[ExperimentKind.NO_INFERRED_TYPE];\n    }\n    return defineMessage({\n      defaultMessage: 'Select a type',\n      description: 'Label for the experiment type selector in the experiment view header',\n    });\n  }\n  return ExperimentKindDropdownLabels[kind];\n};\n\nexport const ExperimentViewHeaderKindSelector = ({\n  value,\n  inferredExperimentKind,\n  onChange,\n  isUpdating,\n  readOnly = false,\n}: {\n  value?: ExperimentKind;\n  inferredExperimentKind?: ExperimentKind;\n  onChange?: (kind: ExperimentKind) => void;\n  isUpdating?: boolean;\n  readOnly?: boolean;\n}) => {\n  const dropdownItems = useMemo(\n    () =>\n      entries(ExperimentKindDropdownLabels).filter(([key]) =>\n        getSelectableExperimentKinds().includes(key as ExperimentKind),\n      ),\n    [],\n  );\n\n  const currentValue = useMemo(() => {\n    if (inferredExperimentKind) {\n      return normalizeInferredExperimentKind(inferredExperimentKind);\n    }\n    return coerceToEnum(ExperimentKind, value, ExperimentKind.NO_INFERRED_TYPE);\n  }, [value, inferredExperimentKind]);\n\n  const visibleLabel = getVisibleLabel(currentValue, readOnly);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [displayInferencePopover, setDisplayInferencePopover] = useState(\n    Boolean(inferredExperimentKind && !readOnly && isEditableExperimentKind(inferredExperimentKind)),\n  );\n\n  // Determines if we should render a dropdown or just a tag.\n  const usingDropdown = isEditableExperimentKind(currentValue) && !readOnly;\n\n  const tagElement = (\n    <Tag\n      icon={isUpdating ? <Spinner size=\"small\" /> : null}\n      componentId=\"mlflow.experiment_view.header.experiment_kind_selector\"\n      css={{ marginRight: 0 }}\n      // Empty callback so <Tag /> renders its \"clickable\" UI style\n      onClick={!usingDropdown ? undefined : () => {}}\n    >\n      {visibleLabel && <FormattedMessage {...visibleLabel} />} {usingDropdown && <ChevronDownIcon />}\n    </Tag>\n  );\n\n  const tagElementWithTooltip = <ExperimentTypeTooltip>{tagElement}</ExperimentTypeTooltip>;\n\n  if (readOnly) {\n    return tagElementWithTooltip;\n  }\n\n  const dropdownElement = (\n    <DropdownMenu.Root\n      modal={false}\n      open={dropdownOpen}\n      onOpenChange={(open) => {\n        setDisplayInferencePopover(false);\n        setDropdownOpen(open);\n      }}\n    >\n      {/* Mixing dropdown with tooltip requires different ordering */}\n      <ExperimentTypeTooltip>\n        <DropdownMenu.Trigger asChild>{tagElement}</DropdownMenu.Trigger>\n      </ExperimentTypeTooltip>\n      <DropdownMenu.Content align=\"start\">\n        <DropdownMenu.Arrow />\n        <DropdownMenu.Label>\n          <FormattedMessage\n            defaultMessage=\"Experiment type\"\n            description=\"Label for the experiment type selector in the experiment view header\"\n          />\n        </DropdownMenu.Label>\n        {dropdownItems.map(([key, label]) => {\n          const isSelected = key === currentValue;\n          return (\n            <DropdownMenu.CheckboxItem\n              key={key}\n              componentId={`mlflow.experiment_view.header.experiment_kind_selector.${key}`}\n              onClick={() => onChange?.(key as ExperimentKind)}\n              checked={isSelected}\n            >\n              <DropdownMenu.ItemIndicator />\n              <FormattedMessage {...label} />\n            </DropdownMenu.CheckboxItem>\n          );\n        })}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n\n  if (displayInferencePopover && inferredExperimentKind) {\n    return (\n      <ExperimentViewInferredKindPopover\n        inferredExperimentKind={inferredExperimentKind}\n        onConfirm={async () => {\n          if (inferredExperimentKind) {\n            onChange?.(normalizeInferredExperimentKind(inferredExperimentKind));\n          }\n          setDisplayInferencePopover(false);\n        }}\n        onDismiss={() => setDisplayInferencePopover(false)}\n        isInferredKindEditable={isEditableExperimentKind(currentValue)}\n      >\n        {usingDropdown ? dropdownElement : tagElementWithTooltip}\n      </ExperimentViewInferredKindPopover>\n    );\n  }\n\n  return usingDropdown ? dropdownElement : tagElementWithTooltip;\n};\n\nconst ExperimentTypeTooltip = ({ children }: { children: React.ReactNode }) => (\n  <Tooltip\n    componentId=\"mlflow.experiment_view.header.experiment_kind_selector.tooltip\"\n    content={\n      <FormattedMessage\n        defaultMessage=\"Experiment type\"\n        description=\"Label for the experiment type selector in the experiment view header\"\n      />\n    }\n  >\n    {children}\n  </Tooltip>\n);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { useCallback } from 'react';\nimport sanitizeHtml from 'sanitize-html';\n// @ts-expect-error TS(7016): Could not find a declaration file for module 'show... Remove this comment to see the full error message\nimport { Converter } from 'showdown';\n\n// Use Github-like Markdown (i.e. support for tasklists, strikethrough,\n// simple line breaks, code blocks, emojis)\nconst DEFAULT_MARKDOWN_FLAVOR = 'github';\n\nlet _converter: Converter | null = null;\n\nexport const getMarkdownConverter = () => {\n  // Reuse the same converter instance if available\n  if (_converter) {\n    return _converter;\n  }\n  _converter = new Converter();\n  _converter.setFlavor(DEFAULT_MARKDOWN_FLAVOR);\n  return _converter;\n};\n\n// Options for HTML sanitizer.\n// See https://www.npmjs.com/package/sanitize-html#what-are-the-default-options for usage.\n// These options were chosen to be similar to Github's allowlist but simpler (i.e. we don't\n// do any transforms of the contained HTML and we disallow script entirely instead of\n// removing contents).\nconst sanitizerOptions = {\n  allowedTags: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'h7',\n    'h8',\n    'blockquote',\n    'p',\n    'a',\n    'ul',\n    'ol',\n    'nl',\n    'li',\n    'ins',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'strike',\n    'code',\n    'hr',\n    'br',\n    'div',\n    'table',\n    'thead',\n    'tbody',\n    'tr',\n    'th',\n    'td',\n    'pre',\n    'del',\n    'sup',\n    'sub',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'samp',\n    'var',\n    'hr',\n    'rt',\n    'rp',\n    'summary',\n    'iframe',\n    'img',\n    'caption',\n    'figure',\n  ],\n  allowedAttributes: {\n    a: ['href', 'name', 'target'],\n    img: ['src', 'longdesc'],\n    div: ['itemscope', 'itemtype'],\n  },\n};\n\nexport const sanitizeConvertedHtml = (dirtyHtml: any) => {\n  return sanitizeHtml(dirtyHtml, sanitizerOptions);\n};\n\nexport const forceAnchorTagNewTab = (html: any) => {\n  return html.replace(new RegExp('<a', 'g'), '<a target=\"_blank\"');\n};\n\nexport const useMarkdownConverter = () =>\n  useCallback((markdown?: string) => {\n    const converter = getMarkdownConverter();\n    const html = converter.makeHtml(markdown);\n    return sanitizeConvertedHtml(html);\n  }, []);\n","import { Modal, Radio, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentKind } from '../../../../constants';\nimport { ExperimentKindDropdownLabels } from '../../../../utils/ExperimentKindUtils';\n\nexport const ExperimentViewInferredKindModal = ({\n  onDismiss,\n  onConfirm,\n}: {\n  onDismiss?: () => void;\n  onConfirm: (kind: ExperimentKind) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [selectedKind, setSelectedKind] = useState<ExperimentKind>(ExperimentKind.CUSTOM_MODEL_DEVELOPMENT);\n\n  return (\n    <Modal\n      visible\n      componentId=\"mlflow.experiment_view.header.experiment_kind_inference_modal\"\n      onCancel={onDismiss}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Choose experiment type\"\n          description=\"A title for the modal displayed when the experiment type could not be inferred\"\n        />\n      }\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"I'll choose later\"\n          description=\"A label for the dismissal button in the modal displayed when the experiment type could not be inferred\"\n        />\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Confirm\"\n          description=\"A label for the confirmation button in the modal displayed when the experiment type could not be inferred\"\n        />\n      }\n      onOk={() => onConfirm(selectedKind)}\n    >\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"We support multiple experiment types, each with its own set of features. Please select the type you'd like to use. You can change this later if needed.\"\n          description=\"Popover message displayed when the experiment type could not not inferred\"\n        />\n      </Typography.Paragraph>\n      <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, marginBottom: theme.spacing.sm }}>\n        <Radio\n          checked={selectedKind === ExperimentKind.GENAI_DEVELOPMENT}\n          onChange={() => setSelectedKind(ExperimentKind.GENAI_DEVELOPMENT)}\n        >\n          <FormattedMessage {...ExperimentKindDropdownLabels[ExperimentKind.GENAI_DEVELOPMENT]} />\n        </Radio>\n        <Radio\n          checked={selectedKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT}\n          onChange={() => setSelectedKind(ExperimentKind.CUSTOM_MODEL_DEVELOPMENT)}\n        >\n          <FormattedMessage {...ExperimentKindDropdownLabels[ExperimentKind.CUSTOM_MODEL_DEVELOPMENT]} />\n        </Radio>\n      </div>\n    </Modal>\n  );\n};\n","import Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\n\nimport {\n  GearIcon,\n  ListBorderIcon,\n  ListIcon,\n  ModelsIcon,\n  PlusMinusSquareIcon,\n  UserIcon,\n  TextBoxIcon,\n} from '@databricks/design-system';\nimport { ExperimentPageTabName } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewRunsCompareMode } from '@mlflow/mlflow/src/experiment-tracking/types';\n\nexport type TabConfig = {\n  label: React.ReactNode;\n  icon: React.ReactNode;\n  getRoute: (experimentId: string) => string;\n};\n\nexport type TabConfigMap = Partial<Record<ExperimentViewRunsCompareMode | ExperimentPageTabName, TabConfig>>;\n\nconst RunsTabConfig = {\n  label: (\n    <FormattedMessage defaultMessage=\"Runs\" description=\"Label for the runs tab in the MLflow experiment navbar\" />\n  ),\n  icon: <ListIcon />,\n  getRoute: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Runs),\n};\n\nconst TracesTabConfig = {\n  label: (\n    <FormattedMessage defaultMessage=\"Traces\" description=\"Label for the traces tab in the MLflow experiment navbar\" />\n  ),\n  icon: <ListBorderIcon />,\n  getRoute: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Traces),\n};\n\nconst ModelsTabConfig = {\n  label: (\n    <FormattedMessage\n      defaultMessage=\"Versions\"\n      description=\"Label for the logged models tab in the MLflow experiment navbar\"\n    />\n  ),\n  icon: <ModelsIcon />,\n  getRoute: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models),\n};\n\nexport const GenAIExperimentTabConfigMap: TabConfigMap = {\n  [ExperimentPageTabName.Traces]: TracesTabConfig,\n  [ExperimentPageTabName.Models]: ModelsTabConfig,\n};\n\nexport const GenAIExperimentWithPromptsTabConfigMap = GenAIExperimentTabConfigMap;\n\nexport const CustomExperimentTabConfigMap: TabConfigMap = {\n  [ExperimentPageTabName.Runs]: RunsTabConfig,\n  [ExperimentPageTabName.Models]: {\n    ...ModelsTabConfig,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"Models\"\n        description=\"Label for the logged models tab in the MLflow experiment navbar\"\n      />\n    ),\n  },\n  [ExperimentPageTabName.Traces]: TracesTabConfig,\n};\n\nexport const DefaultTabConfigMap: TabConfigMap = {\n  ...CustomExperimentTabConfigMap,\n};\n","import React from 'react';\nimport {\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  useDesignSystemTheme,\n  Tooltip,\n} from '@databricks/design-system';\n\nimport { ExperimentKind, ExperimentPageTabName } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { useExperimentPageViewMode } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/hooks/useExperimentPageViewMode';\nimport { Link, useParams } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { shouldEnablePromptsTabOnDBPlatform } from '../../../../../../common/utils/FeatureUtils';\nimport {\n  TabConfigMap,\n  GenAIExperimentTabConfigMap,\n  GenAIExperimentWithPromptsTabConfigMap,\n  CustomExperimentTabConfigMap,\n  DefaultTabConfigMap,\n} from './TabSelectorBarConstants';\nimport { FormattedMessage } from 'react-intl';\nimport { useGetExperimentPageActiveTabByRoute } from '../../../hooks/useGetExperimentPageActiveTabByRoute';\n\nconst isRunsViewTab = (tabName: string) => ['TABLE', 'CHART', 'ARTIFACT'].includes(tabName);\nconst iTracesViewTab = (tabName: string) => ['TRACES'].includes(tabName);\n\nconst getExperimentTabsConfig = (experimentKind?: ExperimentKind): TabConfigMap => {\n  switch (experimentKind) {\n    case ExperimentKind.GENAI_DEVELOPMENT:\n    case ExperimentKind.GENAI_DEVELOPMENT_INFERRED:\n      return shouldEnablePromptsTabOnDBPlatform()\n        ? GenAIExperimentWithPromptsTabConfigMap\n        : GenAIExperimentTabConfigMap;\n    case ExperimentKind.CUSTOM_MODEL_DEVELOPMENT:\n    case ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED:\n    case ExperimentKind.FORECASTING:\n    case ExperimentKind.REGRESSION:\n    case ExperimentKind.AUTOML:\n    case ExperimentKind.CLASSIFICATION:\n      return CustomExperimentTabConfigMap;\n    default:\n      return DefaultTabConfigMap;\n  }\n};\n\nexport const TabSelectorBar = ({ experimentKind }: { experimentKind?: ExperimentKind }) => {\n  const { experimentId, tabName } = useParams();\n  const { theme } = useDesignSystemTheme();\n  const [viewMode] = useExperimentPageViewMode();\n\n  // In the tab selector bar, we're interested in top-level tab names based on the current route\n  const { topLevelTabName: tabNameFromRoute } = useGetExperimentPageActiveTabByRoute();\n\n  let tabNameFromParams = coerceToEnum(ExperimentPageTabName, tabName, undefined);\n  if (tabNameFromParams === ExperimentPageTabName.Datasets) {\n    // datasets is a sub-tab of evaluation runs, so we\n    // should show the evaluation runs tab as active\n    tabNameFromParams = ExperimentPageTabName.EvaluationRuns;\n  }\n  if (tabNameFromParams === ExperimentPageTabName.LabelingSchemas) {\n    // labeling schemas is a sub-tab of labeling sessions, so we\n    // should show the labeling sessions tab as active\n    tabNameFromParams = ExperimentPageTabName.LabelingSessions;\n  }\n\n  const tabNameFromViewMode = (() => {\n    if (isRunsViewTab(viewMode)) {\n      return ExperimentPageTabName.Runs;\n    } else if (iTracesViewTab(viewMode)) {\n      return ExperimentPageTabName.Traces;\n    } else {\n      return viewMode;\n    }\n  })();\n\n  const activeTab = tabNameFromRoute ?? tabNameFromParams ?? tabNameFromViewMode;\n\n  const tabsConfig = getExperimentTabsConfig(experimentKind ?? ExperimentKind.NO_INFERRED_TYPE);\n\n  return (\n    <SegmentedControlGroup\n      value={activeTab}\n      name=\"tab-toggle-bar\"\n      componentId=\"mlflow.experiment-tracking.tab-toggle-bar\"\n      newStyleFlagOverride\n      css={{\n        justifySelf: 'center',\n        [theme.responsive.mediaQueries.xl]: {\n          '& .tab-icon-text': {\n            display: 'inline-flex',\n          },\n          '& .tab-icon-with-tooltip': {\n            display: 'none',\n          },\n        },\n      }}\n    >\n      {Object.entries(tabsConfig).map(([tabName, tabConfig]) => {\n        const isActive = tabName === activeTab;\n\n        return (\n          <React.Fragment key={tabName}>\n            <Link\n              css={{ display: 'none' }}\n              className=\"tab-icon-text\"\n              key={`${tabName}-text`}\n              to={tabConfig.getRoute(experimentId ?? '')}\n            >\n              <SegmentedControlButton\n                data-testid={`tab-selector-button-text-${tabName}-${isActive ? 'active' : 'inactive'}`}\n                className=\"tab-icon-text\"\n                value={tabName}\n                icon={tabConfig.icon}\n              >\n                <span>{tabConfig.label}</span>\n              </SegmentedControlButton>\n            </Link>\n            <Link\n              className=\"tab-icon-with-tooltip\"\n              key={`${tabName}-tooltip`}\n              to={tabConfig.getRoute(experimentId ?? '')}\n            >\n              <SegmentedControlButton\n                data-testid={`tab-selector-button-icon-${tabName}-${isActive ? 'active' : 'inactive'}`}\n                className=\"tab-icon-with-tooltip\"\n                value={tabName}\n                icon={\n                  <Tooltip\n                    delayDuration={0}\n                    content={\n                      <span>\n                        {/* comment for formatting */}\n                        {tabConfig.label}\n                      </span>\n                    }\n                    componentId={`mlflow.experiment-tracking.tab-selector-bar.${tabName}`}\n                  >\n                    <span>{tabConfig.icon}</span>\n                  </Tooltip>\n                }\n              />\n            </Link>\n          </React.Fragment>\n        );\n      })}\n    </SegmentedControlGroup>\n  );\n};\n","import React, { useMemo } from 'react';\nimport {\n  Breadcrumb,\n  ParagraphSkeleton,\n  TitleSkeleton,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewCopyTitle } from './ExperimentViewCopyTitle';\nimport { ExperimentEntity } from '../../../../types';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentViewArtifactLocation } from '../ExperimentViewArtifactLocation';\nimport { ExperimentViewCopyExperimentId } from './ExperimentViewCopyExperimentId';\nimport { ExperimentViewCopyArtifactLocation } from './ExperimentViewCopyArtifactLocation';\nimport { InfoPopover } from '@databricks/design-system';\nimport { TabSelectorBar } from './tab-selector-bar/TabSelectorBar';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { getExperimentKindFromTags } from '../../../../utils/ExperimentKindUtils';\n\nimport { ExperimentKind } from '../../../../constants';\n/**\n * Header for a single experiment page. Displays title, breadcrumbs and provides\n * controls for renaming, deleting and editing permissions.\n */\nexport const ExperimentViewHeaderV2 = React.memo(\n  ({\n    experiment,\n    inferredExperimentKind,\n    searchFacetsState,\n    uiState,\n    setEditing,\n    experimentKindSelector,\n  }: {\n    experiment: ExperimentEntity;\n    inferredExperimentKind?: ExperimentKind;\n    searchFacetsState?: ExperimentPageSearchFacetsState;\n    uiState?: ExperimentPageUIState;\n    setEditing: (editing: boolean) => void;\n    experimentKindSelector?: React.ReactNode;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n    // eslint-disable-next-line prefer-const\n    let breadcrumbs: React.ReactNode[] = [];\n    const experimentIds = useMemo(() => (experiment ? [experiment?.experimentId] : []), [experiment]);\n    // Extract the last part of the experiment name\n    const normalizedExperimentName = useMemo(() => experiment.name.split('/').pop(), [experiment.name]);\n\n    const getInfoTooltip = () => {\n      return (\n        <div style={{ display: 'flex', marginRight: theme.spacing.sm }}>\n          <InfoPopover iconTitle=\"Info\">\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: theme.spacing.xs,\n                flexWrap: 'nowrap',\n              }}\n              data-testid=\"experiment-view-header-info-tooltip-content\"\n            >\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Path\"\n                  description=\"Label for displaying the current experiment path\"\n                />\n                : {experiment.name + ' '}\n                <ExperimentViewCopyTitle experiment={experiment} size=\"md\" />\n              </div>\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Experiment ID\"\n                  description=\"Label for displaying the current experiment in view\"\n                />\n                : {experiment.experimentId + ' '}\n                <ExperimentViewCopyExperimentId experiment={experiment} />\n              </div>\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Artifact Location\"\n                  description=\"Label for displaying the experiment artifact location\"\n                />\n                : <ExperimentViewArtifactLocation artifactLocation={experiment.artifactLocation} />{' '}\n                <ExperimentViewCopyArtifactLocation experiment={experiment} />\n              </div>\n            </div>\n          </InfoPopover>\n        </div>\n      );\n    };\n\n    const experimentKind = inferredExperimentKind ?? getExperimentKindFromTags(experiment.tags);\n\n    return (\n      <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs, marginBottom: theme.spacing.sm }}>\n        <Breadcrumb includeTrailingCaret>\n          {breadcrumbs.map((breadcrumb, index) => (\n            <Breadcrumb.Item key={index}>{breadcrumb}</Breadcrumb.Item>\n          ))}\n        </Breadcrumb>\n        <div css={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr' }}>\n          <div\n            css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center', overflow: 'hidden', minWidth: 250 }}\n          >\n            <Tooltip\n              content={normalizedExperimentName}\n              componentId=\"mlflow.experiment_view.header.experiment-name-tooltip\"\n            >\n              <span\n                css={{\n                  maxWidth: '100%',\n                  overflow: 'hidden',\n                }}\n              >\n                <Typography.Title\n                  withoutMargins\n                  level={2}\n                  css={{\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis',\n                    whiteSpace: 'nowrap',\n                  }}\n                >\n                  {normalizedExperimentName}\n                </Typography.Title>\n              </span>\n            </Tooltip>\n            {experimentKindSelector}\n            {getInfoTooltip()}\n          </div>\n          <TabSelectorBar experimentKind={experimentKind} />\n          <div\n            css={{ display: 'flex', gap: theme.spacing.sm, justifyContent: 'flex-end', marginLeft: theme.spacing.sm }}\n          >\n            <ExperimentViewHeaderShareButton\n              experimentIds={experimentIds}\n              searchFacetsState={searchFacetsState}\n              uiState={uiState}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nexport function ExperimentViewHeaderV2Skeleton() {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n      <ParagraphSkeleton css={{ width: 100 }} loading />\n      <div css={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr' }}>\n        <TitleSkeleton css={{ width: 150, height: theme.general.heightSm }} loading />\n        <TitleSkeleton css={{ height: theme.general.heightSm, alignSelf: 'center' }} loading />\n        <TitleSkeleton css={{ width: theme.spacing.lg, height: theme.general.heightSm, alignSelf: 'right' }} loading />\n      </div>\n    </div>\n  );\n}\n","import { useMemo } from 'react';\nimport { shouldEnableExperimentPageChildRoutes } from '../../../../common/utils/FeatureUtils';\nimport { matchPath, useLocation } from '../../../../common/utils/RoutingUtils';\nimport { RoutePaths } from '../../../routes';\nimport { ExperimentPageTabName } from '../../../constants';\nimport { map } from 'lodash';\n\n// Maps experiment page route paths to enumerated tab names\nconst ExperimentPageRoutePathToTabNameMap = map(\n  {\n    [RoutePaths.experimentPageTabRuns]: ExperimentPageTabName.Runs,\n    [RoutePaths.experimentPageTabTraces]: ExperimentPageTabName.Traces,\n    [RoutePaths.experimentPageTabModels]: ExperimentPageTabName.Models,\n  },\n  (tabName, routePath) => ({ routePath, tabName }),\n);\n\n// Gets exact tab name based on given pathname\nconst getTabNameFromRoutePath = (pathname: string) =>\n  ExperimentPageRoutePathToTabNameMap\n    // Find the first route path that matches the given pathname\n    .find(({ routePath }) => Boolean(matchPath(routePath, pathname)))?.tabName;\n\n// Maps exact tab names to top-level tab names\nconst getTopLevelTab = (tabName?: ExperimentPageTabName) => {\n  return tabName;\n};\n\nexport const useGetExperimentPageActiveTabByRoute = () => {\n  const { pathname } = useLocation();\n\n  const tabNameFromRoute = useMemo(() => {\n    if (!shouldEnableExperimentPageChildRoutes()) {\n      return;\n    }\n    const tabName = getTabNameFromRoutePath(pathname);\n    return tabName;\n  }, [pathname]);\n  return {\n    tabName: tabNameFromRoute,\n    topLevelTabName: getTopLevelTab(tabNameFromRoute),\n  };\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","import { Input } from '@databricks/design-system';\nimport { CopyButton } from './CopyButton';\n\ntype Props = {\n  copyText: string;\n};\n\nexport const CopyBox = ({ copyText }: Props) => (\n  <div css={{ display: 'flex', gap: 4 }}>\n    <Input\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_copybox.tsx_18\"\n      readOnly\n      value={copyText}\n      data-testid=\"copy-box\"\n    />\n    <CopyButton copyText={copyText} />\n  </div>\n);\n","import { FormattedMessage } from 'react-intl';\nimport { Modal } from '@databricks/design-system';\nimport { CopyBox } from '../../../shared/building_blocks/CopyBox';\n\ntype Props = {\n  visible: boolean;\n  onCancel: () => void;\n  link: string;\n};\n\nexport const GetLinkModal = ({ visible, onCancel, link }: Props) => {\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_modals_getlinkmodal.tsx_21\"\n      title={<FormattedMessage defaultMessage=\"Get Link\" description=\"Title text for get-link modal\" />}\n      visible={visible}\n      onCancel={onCancel}\n    >\n      <CopyBox copyText={link} />\n    </Modal>\n  );\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { GenericSkeleton, Input, Modal } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../../redux-types';\nimport { setExperimentTagApi } from '../../../../actions';\nimport Routes from '../../../../routes';\nimport { CopyButton } from '../../../../../shared/building_blocks/CopyButton';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { getStringSHA256, textCompressDeflate } from '../../../../../common/utils/StringUtils';\nimport Utils from '../../../../../common/utils/Utils';\nimport {\n  EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX,\n  EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY,\n} from '../../../../constants';\nimport { shouldUseCompressedExperimentViewSharedState } from '../../../../../common/utils/FeatureUtils';\nimport {\n  EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY,\n  useExperimentPageViewMode,\n} from '../../hooks/useExperimentPageViewMode';\nimport type { ExperimentViewRunsCompareMode } from '../../../../types';\n\ntype GetShareLinkModalProps = {\n  onCancel: () => void;\n  visible: boolean;\n  experimentIds: string[];\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  uiState: ExperimentPageUIState;\n};\n\ntype ShareableViewState = ExperimentPageSearchFacetsState & ExperimentPageUIState;\n\n// Typescript-based test to ensure that the keys of the two states are disjoint.\n// If they are not disjoint, the state serialization will not work as expected.\nconst _arePersistedStatesDisjoint: [\n  keyof ExperimentPageSearchFacetsState & keyof ExperimentPageUIState extends never ? true : false,\n] = [true];\n\nconst serializePersistedState = async (state: ShareableViewState) => {\n  if (shouldUseCompressedExperimentViewSharedState()) {\n    return textCompressDeflate(JSON.stringify(state));\n  }\n  return JSON.stringify(state);\n};\n\nconst getShareableUrl = (experimentId: string, shareStateHash: string, viewMode?: ExperimentViewRunsCompareMode) => {\n  // As a start, get the route\n  const route = Routes.getExperimentPageRoute(experimentId);\n\n  // Begin building the query params\n  const queryParams = new URLSearchParams();\n\n  // Add the share state hash\n  queryParams.set(EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY, shareStateHash);\n\n  // If the view mode is set, add it to the query params\n  if (viewMode) {\n    queryParams.set(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY, viewMode);\n  }\n\n  // In regular implementation, build the hash part of the URL\n  const params = queryParams.toString();\n  const hashParam = `${route}${params?.startsWith('?') ? '' : '?'}${params}`;\n  const shareURL = `${window.location.origin}${window.location.pathname}#${hashParam}`;\n  return shareURL;\n};\n\n/**\n * Modal that displays shareable link for the experiment page.\n * The shareable state is created by serializing the search facets and UI state and storing\n * it as a tag on the experiment.\n */\nexport const ExperimentGetShareLinkModal = ({\n  onCancel,\n  visible,\n  experimentIds,\n  searchFacetsState,\n  uiState,\n}: GetShareLinkModalProps) => {\n  const [sharedStateUrl, setSharedStateUrl] = useState<string>('');\n  const [linkInProgress, setLinkInProgress] = useState(true);\n  const [generatedState, setGeneratedState] = useState<ShareableViewState | null>(null);\n  const [viewMode] = useExperimentPageViewMode();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const stateToSerialize = useMemo(() => ({ ...searchFacetsState, ...uiState }), [searchFacetsState, uiState]);\n\n  const createSerializedState = useCallback(\n    async (state: ShareableViewState) => {\n      if (experimentIds.length > 1) {\n        setLinkInProgress(false);\n        setGeneratedState(state);\n        setSharedStateUrl(window.location.href);\n        return;\n      }\n      setLinkInProgress(true);\n      const [experimentId] = experimentIds;\n      try {\n        const data = await serializePersistedState(state);\n        const hash = await getStringSHA256(data);\n\n        const tagName = `${EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX}${hash}`;\n\n        await dispatch(setExperimentTagApi(experimentId, tagName, data));\n\n        setLinkInProgress(false);\n        setGeneratedState(state);\n\n        setSharedStateUrl(getShareableUrl(experimentId, hash, viewMode));\n      } catch (e) {\n        Utils.logErrorAndNotifyUser('Failed to create shareable link for experiment');\n        throw e;\n      }\n    },\n    [dispatch, experimentIds, viewMode],\n  );\n\n  useEffect(() => {\n    if (!visible || generatedState === stateToSerialize) {\n      return;\n    }\n    createSerializedState(stateToSerialize);\n  }, [visible, createSerializedState, generatedState, stateToSerialize]);\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentgetsharelinkmodal.tsx_101\"\n      title={\n        <FormattedMessage\n          defaultMessage=\"Get shareable link\"\n          description='Title text for the experiment \"Get link\" modal'\n        />\n      }\n      visible={visible}\n      onCancel={onCancel}\n    >\n      <div css={{ display: 'flex', gap: 8 }}>\n        {linkInProgress ? (\n          <GenericSkeleton css={{ flex: 1 }} />\n        ) : (\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentgetsharelinkmodal.tsx_115\"\n            placeholder=\"Click button on the right to create shareable state\"\n            value={sharedStateUrl}\n            readOnly\n          />\n        )}\n        <CopyButton loading={linkInProgress} copyText={sharedStateUrl} data-testid=\"share-link-copy-button\" />\n      </div>\n    </Modal>\n  );\n};\n","import { Button } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { GetLinkModal } from '../../../modals/GetLinkModal';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentGetShareLinkModal } from './ExperimentGetShareLinkModal';\n\n/**\n * Experiment page header part responsible for displaying button\n * that displays modal for sharing the link\n */\nexport const ExperimentViewHeaderShareButton = ({\n  searchFacetsState,\n  uiState,\n  experimentIds,\n}: {\n  searchFacetsState?: ExperimentPageSearchFacetsState;\n  uiState?: ExperimentPageUIState;\n  experimentIds?: string[];\n}) => {\n  const [showGetLinkModal, setShowGetLinkModal] = useState(false);\n\n  return (\n    <>\n      {searchFacetsState && uiState && experimentIds ? (\n        <ExperimentGetShareLinkModal\n          searchFacetsState={searchFacetsState}\n          uiState={uiState}\n          visible={showGetLinkModal}\n          onCancel={() => setShowGetLinkModal(false)}\n          experimentIds={experimentIds}\n        />\n      ) : (\n        <GetLinkModal\n          link={window.location.href}\n          visible={showGetLinkModal}\n          onCancel={() => setShowGetLinkModal(false)}\n        />\n      )}\n      {/* TODO: ensure that E2E tests are working after refactor is complete */}\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentviewheadersharebutton.tsx_44\"\n        type=\"primary\"\n        onClick={() => setShowGetLinkModal(true)}\n        data-testid=\"share-button\"\n      >\n        <FormattedMessage defaultMessage=\"Share\" description=\"Text for share button on experiment view page header\" />\n      </Button>\n    </>\n  );\n};\n","import React from 'react';\n\nexport interface ExperimentViewArtifactLocationProps {\n  artifactLocation: string;\n}\n\nexport const ExperimentViewArtifactLocation = ({ artifactLocation }: ExperimentViewArtifactLocationProps) => {\n  return <>{artifactLocation}</>;\n};\n","import _ from 'lodash';\n// Import pako lazily to reduce bundle size\nconst lazyPako = () => import('pako');\n\nexport const truncateToFirstLineWithMaxLength = (str: string, maxLength: number): string => {\n  const truncated = _.truncate(str, {\n    length: maxLength,\n  });\n  return _.takeWhile(truncated, (char) => char !== '\\n').join('');\n};\n\nexport const capitalizeFirstChar = (str: unknown) => {\n  if (!str || typeof str !== 'string' || str.length < 1) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport const middleTruncateStr = (str: string, maxLen: number) => {\n  if (str.length > maxLen) {\n    const firstPartLen = Math.floor((maxLen - 3) / 2);\n    const lastPartLen = maxLen - 3 - firstPartLen;\n    return str.substring(0, firstPartLen) + '...' + str.substring(str.length - lastPartLen, str.length);\n  } else {\n    return str;\n  }\n};\n\nconst capitalizeFirstLetter = (string: string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/* eslint-disable no-bitwise */\n/**\n * UTF-8 safe version of base64 encoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to encode\n */\nexport const btoaUtf8 = (input: string) => {\n  let output = '';\n  let i = 0;\n\n  const result = _utf8_encode(input);\n\n  while (i < result.length) {\n    const chr1 = result.charCodeAt(i++);\n    const chr2 = result.charCodeAt(i++);\n    const chr3 = result.charCodeAt(i++);\n\n    const enc1 = chr1 >> 2;\n    const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n    let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n    let enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc4 = 64;\n      enc3 = enc4;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n\n  return output;\n};\n\n/**\n * UTF-8 safe version of base64 decoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to decode\n */\nexport const atobUtf8 = (input: string) => {\n  let output = '';\n  let i = 0;\n\n  const result = input?.replace(/[^A-Za-z0-9+/=]/g, '') || '';\n\n  while (i < result.length) {\n    const enc1 = _keyStr.indexOf(result.charAt(i++));\n    const enc2 = _keyStr.indexOf(result.charAt(i++));\n    const enc3 = _keyStr.indexOf(result.charAt(i++));\n    const enc4 = _keyStr.indexOf(result.charAt(i++));\n\n    const chr1 = (enc1 << 2) | (enc2 >> 4);\n    const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    const chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output += String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output += String.fromCharCode(chr2);\n    }\n\n    if (enc4 !== 64) {\n      output += String.fromCharCode(chr3);\n    }\n  }\n\n  return _utf8_decode(output);\n};\n\n/**\n * (private method) does a UTF-8 encoding\n *\n * @private\n * @param {string} string - Text to encode\n */\nconst _utf8_encode = (string = '') => {\n  const result = string.replace(/\\r\\n/g, '\\n');\n  let utftext = '';\n\n  for (let n = 0; n < result.length; n++) {\n    const c = result.charCodeAt(n);\n\n    if (c < 128) {\n      utftext += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode((c >> 6) | 192) + String.fromCharCode((c & 63) | 128);\n    } else {\n      utftext +=\n        String.fromCharCode((c >> 12) | 224) +\n        String.fromCharCode(((c >> 6) & 63) | 128) +\n        String.fromCharCode((c & 63) | 128);\n    }\n  }\n\n  return utftext;\n};\n\n/**\n * (private method) does a UTF-8 decoding\n *\n * @private\n * @param {string} utftext - UTF-8 text to dencode\n */\nconst _utf8_decode = (utftext = '') => {\n  let string = '';\n  let i = 0;\n\n  while (i < utftext.length) {\n    const c = utftext.charCodeAt(i);\n\n    if (c < 128) {\n      string += String.fromCharCode(c);\n      i++;\n    } else if (c > 191 && c < 224) {\n      const c2 = utftext.charCodeAt(i + 1);\n      string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n      i += 2;\n    } else {\n      const c2 = utftext.charCodeAt(i + 1);\n      const c3 = utftext.charCodeAt(i + 2);\n      string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n      i += 3;\n    }\n  }\n  return string;\n};\n/* eslint-enable no-bitwise */\n\n/**\n * Returns a SHA256 hash of the input string\n */\nexport const getStringSHA256 = (input: string) => {\n  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(input)).then((arrayBuffer) => {\n    return Array.prototype.map.call(new Uint8Array(arrayBuffer), (x) => ('00' + x.toString(16)).slice(-2)).join('');\n  });\n};\n\nconst COMPRESSED_TEXT_DEFLATE_PREFIX = 'deflate;';\n\nexport const textCompressDeflate = async (text: string) => {\n  const pako = await lazyPako();\n  const binaryData = pako.deflate(text);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const b64encoded = Buffer.from(binaryData).toString('base64');\n    return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${b64encoded}`;\n  }\n\n  // btoa-based implementation\n  const binaryString = Array.from(binaryData, (byte) => String.fromCodePoint(byte)).join('');\n  return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${btoa(binaryString)}`;\n};\n\nexport const textDecompressDeflate = async (compressedText: string) => {\n  const pako = await lazyPako();\n  if (!compressedText.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX)) {\n    throw new Error('Invalid compressed text, payload header invalid');\n  }\n  const compressedTextWithoutPrefix = compressedText.slice(COMPRESSED_TEXT_DEFLATE_PREFIX.length);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const binaryString = Buffer.from(compressedTextWithoutPrefix, 'base64');\n    return pako.inflate(\n      // This doesn't fail in Mlflow-Copybara-Tester-Pr. TODO: check why.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore [FEINF-4084] No overload matches this call.\n      binaryString,\n      { to: 'string' },\n    );\n  }\n\n  // atob-based implementation\n  const binaryString = atob(compressedTextWithoutPrefix);\n  return pako.inflate(\n    Uint8Array.from(binaryString, (m) => m.codePointAt(0) ?? 0),\n    { to: 'string' },\n  );\n};\n\nexport const isTextCompressedDeflate = (text: string) => text.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX);\n","import { useNavigate, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport { ExperimentPageTabName } from '../../../constants';\nimport Routes from '../../../routes';\nimport { type ExperimentViewRunsCompareMode } from '../../../types';\n\nexport const EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY = 'compareRunsMode';\n\nexport const getExperimentPageDefaultViewMode = (): ExperimentViewRunsCompareMode => 'TABLE';\n\n// This map is being used to wire routes to certain view modes\nconst viewModeToRouteMap: Partial<Record<ExperimentViewRunsCompareMode, (experimentId: string) => void>> = {\n  MODELS: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models),\n};\n/**\n * Hook using search params to retrieve and update the current experiment page runs view mode.\n * Handles legacy part of the mode switching, based on \"compareRunsMode\" query parameter.\n * Modern part of the mode switching is handled by <ExperimentViewRunsModeSwitchV2> which works using route params.\n */\nexport const useExperimentPageViewMode = (): [\n  ExperimentViewRunsCompareMode,\n  (newCompareRunsMode: ExperimentViewRunsCompareMode, experimentId?: string) => void,\n] => {\n  const [params, setParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  const mode =\n    (params.get(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY) as ExperimentViewRunsCompareMode) ||\n    getExperimentPageDefaultViewMode();\n  const setMode = (newCompareRunsMode: ExperimentViewRunsCompareMode, experimentId?: string) => {\n    // Check if the new mode should actually navigate to a different route instead of just changing the query param\n    if (newCompareRunsMode in viewModeToRouteMap && experimentId) {\n      const route = viewModeToRouteMap[newCompareRunsMode]?.(experimentId);\n      if (route) {\n        navigate(route);\n        return;\n      }\n    }\n    setParams(\n      (currentParams) => {\n        currentParams.set(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY, newCompareRunsMode || '');\n        return currentParams;\n      },\n      { replace: false },\n    );\n  };\n\n  return [mode, setMode];\n};\n","import React, { useMemo } from 'react';\nimport { Button, GenericSkeleton, NewWindowIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewCopyTitle } from './ExperimentViewCopyTitle';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { ExperimentEntity } from '../../../../types';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentViewArtifactLocation } from '../ExperimentViewArtifactLocation';\nimport { ExperimentViewCopyExperimentId } from './ExperimentViewCopyExperimentId';\nimport { ExperimentViewCopyArtifactLocation } from './ExperimentViewCopyArtifactLocation';\nimport { InfoPopover } from '@databricks/design-system';\nimport { Link } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\nimport Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\n\n/**\n * Header for a single experiment page. Displays title, breadcrumbs and provides\n * controls for renaming, deleting and editing permissions.\n */\nexport const ExperimentViewHeader = React.memo(\n  ({\n    experiment,\n    searchFacetsState,\n    uiState,\n    showAddDescriptionButton,\n    setEditing,\n  }: {\n    experiment: ExperimentEntity;\n    searchFacetsState?: ExperimentPageSearchFacetsState;\n    uiState?: ExperimentPageUIState;\n    showAddDescriptionButton: boolean;\n    setEditing: (editing: boolean) => void;\n  }) => {\n    const breadcrumbs = useMemo(\n      () => [\n        <Link\n          key={Routes.experimentsObservatoryRoute}\n          to={Routes.experimentsObservatoryRoute}\n          data-testid=\"experiment-observatory-link\"\n        >\n          <FormattedMessage\n            defaultMessage=\"Experiments\"\n            description=\"Breadcrumb nav item to link to the list of experiments page\"\n          />\n        </Link>,\n      ],\n      [],\n    );\n    const experimentIds = useMemo(() => (experiment ? [experiment?.experimentId] : []), [experiment]);\n\n    const { theme } = useDesignSystemTheme();\n\n    /**\n     * Extract the last part of the experiment name\n     */\n    const normalizedExperimentName = useMemo(() => experiment.name.split('/').pop(), [experiment.name]);\n\n    const getInfoTooltip = () => {\n      return (\n        <div style={{ display: 'flex' }}>\n          <InfoPopover iconTitle=\"Info\">\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: theme.spacing.xs,\n                flexWrap: 'nowrap',\n              }}\n              data-testid=\"experiment-view-header-info-tooltip-content\"\n            >\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Path\"\n                  description=\"Label for displaying the current experiment path\"\n                />\n                : {experiment.name + ' '}\n                <ExperimentViewCopyTitle experiment={experiment} size=\"md\" />\n              </div>\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Experiment ID\"\n                  description=\"Label for displaying the current experiment in view\"\n                />\n                : {experiment.experimentId + ' '}\n                <ExperimentViewCopyExperimentId experiment={experiment} />\n              </div>\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Artifact Location\"\n                  description=\"Label for displaying the experiment artifact location\"\n                />\n                : <ExperimentViewArtifactLocation artifactLocation={experiment.artifactLocation} />{' '}\n                <ExperimentViewCopyArtifactLocation experiment={experiment} />\n              </div>\n            </div>\n          </InfoPopover>\n        </div>\n      );\n    };\n    const getAddDescriptionButton = () => {\n      return (\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentviewheaderv2.tsx_271\"\n          size=\"small\"\n          onClick={() => {\n            setEditing(true);\n          }}\n          css={{\n            marginLeft: theme.spacing.sm,\n            background: `${theme.colors.backgroundSecondary} !important`,\n            border: 'none',\n          }}\n        >\n          <Typography.Text size=\"md\">Add Description</Typography.Text>\n        </Button>\n      );\n    };\n\n    return (\n      <PageHeader\n        title={\n          <div\n            css={{\n              [theme.responsive.mediaQueries.xs]: {\n                display: 'inline',\n                wordBreak: 'break-all',\n              },\n              [theme.responsive.mediaQueries.sm]: {\n                display: 'inline-block',\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                verticalAlign: 'middle',\n              },\n            }}\n            title={normalizedExperimentName}\n          >\n            {normalizedExperimentName}\n          </div>\n        }\n        titleAddOns={[\n          getInfoTooltip(),\n          showAddDescriptionButton && getAddDescriptionButton(),\n        ].filter(Boolean)}\n        breadcrumbs={breadcrumbs}\n        spacerSize=\"sm\"\n        dangerouslyAppendEmotionCSS={{\n          [theme.responsive.mediaQueries.sm]: {\n            // Do not wrap the title and buttons on >= small screens\n            '& > div': {\n              flexWrap: 'nowrap',\n            },\n            // The title itself should display elements horizontally\n            h2: {\n              display: 'flex',\n              overflow: 'hidden',\n            },\n          },\n        }}\n      >\n      </PageHeader>\n    );\n  },\n);\n\nexport function ExperimentViewHeaderSkeleton() {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ height: 2 * theme.general.heightSm }}>\n      <div css={{ height: theme.spacing.lg }}>\n        <GenericSkeleton css={{ width: 100, height: theme.spacing.md }} loading />\n      </div>\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          <GenericSkeleton css={{ width: 160, height: theme.general.heightSm }} loading />\n        </div>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <GenericSkeleton css={{ width: 100, height: theme.general.heightSm }} loading />\n          <GenericSkeleton css={{ width: 60, height: theme.general.heightSm }} loading />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { ExperimentKind } from '../../../constants';\nimport { MlflowService } from '../../../sdk/MlflowService';\n\n/**\n * An utility wrapper hook to update the experiment kind.\n * The success callback is optional but it's part of the mutation to include it in the loading state.\n */\nexport const useUpdateExperimentKind = (onSuccess?: () => void) =>\n  useMutation<unknown, Error, { experimentId: string; kind: ExperimentKind }>({\n    mutationFn: ({ experimentId, kind }) =>\n      MlflowService.setExperimentTag({\n        experiment_id: experimentId,\n        key: 'mlflow.experimentKind',\n        value: kind,\n      }).then(() => onSuccess?.() ?? Promise.resolve()),\n  });\n","import { ExperimentEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Modal,\n  PencilIcon,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getExperimentTags } from '../../../reducers/Reducers';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport React from 'react';\nimport 'react-mde/lib/styles/css/react-mde-all.css';\nimport ReactMde, { SvgIcon } from 'react-mde';\nimport {\n  forceAnchorTagNewTab,\n  getMarkdownConverter,\n  sanitizeConvertedHtml,\n} from '../../../../common/utils/MarkdownUtils';\nimport { FormattedMessage } from 'react-intl';\nimport { setExperimentTagApi } from '../../../actions';\n\nconst extractNoteFromTags = (tags: Record<string, KeyValueEntity>) =>\n  Object.values(tags).find((t) => t.key === NOTE_CONTENT_TAG)?.value || undefined;\n\nconst toolbarCommands = [\n  ['header', 'bold', 'italic', 'strikethrough'],\n  ['link', 'code', 'image'],\n  ['unordered-list', 'ordered-list'],\n];\n\nconst converter = getMarkdownConverter();\n\nconst getSanitizedHtmlContent = (markdown: string | undefined) => {\n  if (markdown) {\n    const sanitized = sanitizeConvertedHtml(converter.makeHtml(markdown));\n    return forceAnchorTagNewTab(sanitized);\n  }\n  return null;\n};\n\nexport const ExperimentViewDescriptionNotes = ({\n  experiment,\n  editing,\n  setEditing,\n  setShowAddDescriptionButton,\n  onNoteUpdated,\n  defaultValue,\n}: {\n  experiment: ExperimentEntity;\n  editing: boolean;\n  setEditing: (editing: boolean) => void;\n  setShowAddDescriptionButton: (show: boolean) => void;\n  onNoteUpdated?: () => void;\n  defaultValue?: string;\n}) => {\n  const storedNote = useSelector((state) => {\n    const tags = getExperimentTags(experiment.experimentId, state);\n    return tags ? extractNoteFromTags(tags) : '';\n  });\n  setShowAddDescriptionButton(!storedNote);\n\n  const effectiveNote = storedNote || defaultValue;\n  const [tmpNote, setTmpNote] = useState(effectiveNote);\n  const [selectedTab, setSelectedTab] = useState<'write' | 'preview' | undefined>('write');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n  const PADDING_HORIZONTAL = 12;\n  const DISPLAY_LINE_HEIGHT = 16;\n  const COLLAPSE_MAX_HEIGHT = DISPLAY_LINE_HEIGHT + 2 * theme.spacing.sm;\n  const MIN_EDITOR_HEIGHT = 200;\n  const MAX_EDITOR_HEIGHT = 500;\n  const MIN_PREVIEW_HEIGHT = 20;\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = useCallback(\n    (updatedNote?: string) => {\n      setEditing(false);\n      setShowAddDescriptionButton(!updatedNote);\n      const action = setExperimentTagApi(experiment.experimentId, NOTE_CONTENT_TAG, updatedNote);\n      dispatch(action).then(onNoteUpdated);\n    },\n    [experiment.experimentId, dispatch, setEditing, setShowAddDescriptionButton, onNoteUpdated],\n  );\n\n  return (\n    <div>\n      {effectiveNote && (\n        <div\n          style={{\n            whiteSpace: isExpanded ? 'normal' : 'pre-wrap',\n            lineHeight: theme.typography.lineHeightLg,\n            background: theme.colors.backgroundSecondary,\n            display: 'flex',\n            alignItems: 'flex-start',\n            padding: theme.spacing.xs,\n          }}\n        >\n          <div\n            style={{\n              flexGrow: 1,\n              marginRight: PADDING_HORIZONTAL,\n              overflow: 'hidden',\n              overflowWrap: isExpanded ? 'break-word' : undefined,\n              padding: `${theme.spacing.sm}px ${PADDING_HORIZONTAL}px`,\n              maxHeight: isExpanded ? 'none' : COLLAPSE_MAX_HEIGHT + 'px',\n              wordBreak: 'break-word',\n            }}\n          >\n            <div\n              // eslint-disable-next-line react/no-danger\n              dangerouslySetInnerHTML={{ __html: getSanitizedHtmlContent(effectiveNote) }}\n            />\n          </div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_114\"\n            icon={<PencilIcon />}\n            onClick={() => setEditing(true)}\n            style={{ padding: `0px ${theme.spacing.sm}px` }}\n          />\n          {isExpanded ? (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_120\"\n              icon={<ChevronUpIcon />}\n              onClick={() => setIsExpanded(false)}\n              style={{ padding: `0px ${theme.spacing.sm}px` }}\n            />\n          ) : (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_126\"\n              icon={<ChevronDownIcon />}\n              onClick={() => setIsExpanded(true)}\n              style={{ padding: `0px ${theme.spacing.sm}px` }}\n            />\n          )}\n        </div>\n      )}\n      <Modal\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_141\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Add description\"\n            description=\"experiment page > description modal > title\"\n          />\n        }\n        visible={editing}\n        okText={\n          <FormattedMessage defaultMessage=\"Save\" description=\"experiment page > description modal > save button\" />\n        }\n        cancelText={\n          <FormattedMessage defaultMessage=\"Cancel\" description=\"experiment page > description modal > cancel button\" />\n        }\n        onOk={() => {\n          handleSubmitEditNote(tmpNote);\n          setEditing(false);\n        }}\n        onCancel={() => {\n          setTmpNote(effectiveNote);\n          setEditing(false);\n        }}\n      >\n        <React.Fragment>\n          <ReactMde\n            value={tmpNote}\n            minEditorHeight={MIN_EDITOR_HEIGHT}\n            maxEditorHeight={MAX_EDITOR_HEIGHT}\n            minPreviewHeight={MIN_PREVIEW_HEIGHT}\n            toolbarCommands={toolbarCommands}\n            onChange={(value) => setTmpNote(value)}\n            selectedTab={selectedTab}\n            onTabChange={(newTab) => setSelectedTab(newTab)}\n            generateMarkdownPreview={() => Promise.resolve(getSanitizedHtmlContent(tmpNote))}\n            getIcon={(name) => (\n              <LegacyTooltip title={name}>\n                <span css={{ color: theme.colors.textPrimary }}>\n                  <SvgIcon icon={name} />\n                </span>\n              </LegacyTooltip>\n            )}\n          />\n        </React.Fragment>\n      </Modal>\n    </div>\n  );\n};\n","import { gql, QueryHookOptions } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables } from '../../graphql/__generated__/graphql';\nimport { isArray } from 'lodash';\nimport { NotFoundError } from '@databricks/web-shared/errors';\n\nconst GET_EXPERIMENT_QUERY = gql`\n  query MlflowGetExperimentQuery($input: MlflowGetExperimentInput!) @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetExperiment(input: $input) {\n      apiError {\n        code\n        message\n      }\n      experiment {\n        artifactLocation\n        creationTime\n        experimentId\n        lastUpdateTime\n        lifecycleStage\n        name\n        tags {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n\nexport type UseGetExperimentQueryResultExperiment = NonNullable<\n  MlflowGetExperimentQuery['mlflowGetExperiment']\n>['experiment'];\n\n/* eslint-disable react-hooks/rules-of-hooks */\nexport const useGetExperimentQuery = ({\n  experimentId,\n  options = {},\n}: {\n  experimentId?: string;\n  options?: QueryHookOptions<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>;\n}) => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>(GET_EXPERIMENT_QUERY, {\n    variables: {\n      input: {\n        experimentId,\n      },\n    },\n    skip: !experimentId,\n    ...options,\n  });\n\n  // Extract the single experiment entity from the response\n  const experimentEntity: UseGetExperimentQueryResultExperiment | undefined = data?.mlflowGetExperiment?.experiment;\n\n  const getApiError = () => {\n    return data?.mlflowGetExperiment?.apiError;\n  };\n\n  return {\n    loading,\n    data: experimentEntity,\n    refetch,\n    apolloError: apolloError,\n    apiError: getApiError(),\n  } as const;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-testid={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-testid=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the title after clicking on the icon\n */\nexport const ExperimentViewCopyTitle = ({\n  experiment,\n  size,\n}: {\n  experiment: ExperimentEntity;\n  size: 'sm' | 'md' | 'lg' | 'xl';\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size={size}\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.name,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy path',\n              description: 'Copy tooltip to copy experiment path from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Path copied',\n              description: 'Tooltip displayed after experiment path was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","export function coerceToEnum<T extends Record<string, string>, K extends keyof T, V extends T[K] | undefined>(\n  enumObj: T,\n  value: any,\n  fallback: V,\n): V | T[keyof T] {\n  if (value === undefined || value === null || typeof value !== 'string') {\n    return fallback;\n  }\n  for (const v in enumObj) {\n    if (enumObj[v] === value) return enumObj[v];\n  }\n  return fallback;\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect } from 'react';\n\ninterface SizeMap {\n  [key: string]: number;\n}\n\nfunction useResponsiveContainer(ref: RefObject<HTMLElement>, sizeMap: SizeMap): string | null {\n  const [matchedSize, setMatchedSize] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (ref.current && sizeMap) {\n      const handleResize = () => {\n        if (!ref.current) {\n          return;\n        }\n        const elementWidth = ref.current.offsetWidth;\n        const matchedKey = Object.keys(sizeMap)\n          .filter((key) => sizeMap[key] >= elementWidth)\n          .sort((a, b) => sizeMap[a] - sizeMap[b])[0];\n\n        setMatchedSize(matchedKey);\n      };\n\n      handleResize();\n\n      const resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(ref.current);\n\n      return () => resizeObserver.disconnect();\n    }\n    return undefined;\n  }, [ref, sizeMap]);\n\n  return matchedSize;\n}\n\nexport default useResponsiveContainer;\n","import { GenericSkeleton, ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ReactNode } from 'react';\nimport { useRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport useResponsiveContainer from './useResponsiveContainer';\n\nexport interface AsideSectionProps {\n  id: string;\n  title?: ReactNode;\n  content: ReactNode;\n  isTitleLoading?: boolean;\n}\n\nexport type MaybeAsideSection = AsideSectionProps | null;\nexport type AsideSections = Array<MaybeAsideSection>;\n\nconst SIDEBAR_WIDTHS = {\n  sm: 316,\n  lg: 480,\n} as const;\nconst VERTICAL_MARGIN_PX = 16;\nconst DEFAULT_MAX_WIDTH = 450;\n\nexport const OverviewLayout = ({\n  isLoading,\n  asideSections,\n  children,\n  isTabLayout = true,\n  sidebarSize = 'sm',\n  verticalStackOrder,\n}: {\n  isLoading?: boolean;\n  asideSections: AsideSections;\n  children: ReactNode;\n  isTabLayout?: boolean;\n  sidebarSize?: 'sm' | 'lg';\n  verticalStackOrder?: 'main-first' | 'aside-first';\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const stackVertically = useResponsiveContainer(containerRef, { small: theme.responsive.breakpoints.lg }) === 'small';\n\n  // Determine vertical stack order, i.e. should the main content be on top or bottom\n  const verticalDisplayPrimaryContentOnTop = verticalStackOrder === 'main-first';\n\n  const totalSidebarWidth = SIDEBAR_WIDTHS[sidebarSize];\n  const innerSidebarWidth = totalSidebarWidth - VERTICAL_MARGIN_PX;\n\n  const secondaryStackedStyles = stackVertically\n    ? verticalDisplayPrimaryContentOnTop\n      ? { width: '100%' }\n      : { borderBottom: `1px solid ${theme.colors.border}`, width: '100%' }\n    : verticalDisplayPrimaryContentOnTop\n    ? {\n        width: innerSidebarWidth,\n      }\n    : {\n        paddingBottom: theme.spacing.sm,\n        width: innerSidebarWidth,\n      };\n\n  return (\n    <div\n      data-testid=\"entity-overview-container\"\n      ref={containerRef}\n      css={{\n        display: 'flex',\n        flexDirection: stackVertically ? (verticalDisplayPrimaryContentOnTop ? 'column' : 'column-reverse') : 'row',\n        gap: theme.spacing.lg,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexGrow: 1,\n          flexDirection: 'column',\n          gap: theme.spacing.md,\n          width: stackVertically ? '100%' : `calc(100% - ${totalSidebarWidth}px)`,\n        }}\n      >\n        {isLoading ? <GenericSkeleton /> : children}\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          ...(isTabLayout && { marginTop: -theme.spacing.md }), // remove the gap between tab list and sidebar content\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.lg,\n            ...secondaryStackedStyles,\n          }}\n        >\n          {isLoading && <GenericSkeleton />}\n          {!isLoading && <SidebarWrapper secondarySections={asideSections} />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SidebarWrapper = ({ secondarySections }: { secondarySections: AsideSections }) => {\n  return (\n    <div>\n      {secondarySections\n        .filter((section) => section !== null)\n        .filter((section) => section?.content !== null)\n        .map(({ title, isTitleLoading, content, id }, index) => (\n          <AsideSection title={title} isTitleLoading={isTitleLoading} content={content} key={id} index={index} />\n        ))}\n    </div>\n  );\n};\n\nexport const AsideSectionTitle = ({ children }: { children: ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Typography.Title\n      level={4}\n      style={{\n        whiteSpace: 'nowrap',\n        marginRight: theme.spacing.lg,\n        marginTop: 0,\n      }}\n    >\n      {children}\n    </Typography.Title>\n  );\n};\n\nconst AsideSection = ({\n  title,\n  content,\n  index,\n  isTitleLoading = false,\n}: Omit<AsideSectionProps, 'id'> & {\n  index: number;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const titleComponent = isTitleLoading ? (\n    <ParagraphSkeleton\n      label={\n        <FormattedMessage\n          defaultMessage=\"Section title loading\"\n          description=\"Loading skeleton label for overview page section title in Catalog Explorer\"\n        />\n      }\n    />\n  ) : title ? (\n    <AsideSectionTitle>{title}</AsideSectionTitle>\n  ) : null;\n\n  const compactStyles = { padding: `${theme.spacing.md}px 0 ${theme.spacing.md}px 0` };\n\n  return (\n    <div\n      css={{\n        ...compactStyles,\n        ...(index === 0 ? {} : { borderTop: `1px solid ${theme.colors.border}` }),\n      }}\n    >\n      {titleComponent}\n      {content}\n    </div>\n  );\n};\n\nexport const KeyValueProperty = ({\n  keyValue,\n  value,\n  maxWidth,\n}: {\n  keyValue: string;\n  value: React.ReactNode;\n  maxWidth?: number | string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        '&:has(+ div)': {\n          marginBottom: theme.spacing.xs,\n        },\n        maxWidth: maxWidth ?? DEFAULT_MAX_WIDTH,\n        wordBreak: 'break-word',\n        lineHeight: theme.typography.lineHeightLg,\n      }}\n    >\n      <div\n        css={{\n          color: theme.colors.textSecondary,\n          flex: 0.5,\n          alignSelf: 'start',\n        }}\n      >\n        {keyValue}\n      </div>\n      <div\n        css={{\n          flex: 1,\n          alignSelf: 'start',\n          overflow: 'hidden',\n        }}\n      >\n        {value}\n      </div>\n    </div>\n  );\n};\n\nexport const NoneCell = () => {\n  return (\n    <Typography.Text color=\"secondary\">\n      <FormattedMessage defaultMessage=\"None\" description=\"Cell value when there's no content\" />\n    </Typography.Text>\n  );\n};\n","import { ExperimentKind } from '../constants';\nimport { defineMessage, MessageDescriptor } from 'react-intl';\nimport { KeyValueEntity } from '../../common/types';\n\nexport const EXPERIMENT_KIND_TAG_KEY = 'mlflow.experimentKind';\n\nexport const getExperimentKindFromTags = (\n  experimentTags?:\n    | ({ __typename: 'MlflowExperimentTag'; key: string | null; value: string | null }[] | null)\n    | KeyValueEntity[],\n): ExperimentKind | undefined =>\n  experimentTags?.find((tag) => tag.key === EXPERIMENT_KIND_TAG_KEY)?.value as ExperimentKind;\n\nexport const isEditableExperimentKind = (experimentKind: ExperimentKind): boolean =>\n  experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED ||\n  experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED ||\n  experimentKind === ExperimentKind.NO_INFERRED_TYPE ||\n  experimentKind === ExperimentKind.GENAI_DEVELOPMENT ||\n  experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT ||\n  experimentKind === ExperimentKind.EMPTY;\n\nexport const normalizeInferredExperimentKind = (experimentKind: ExperimentKind): ExperimentKind => {\n  if (experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED) {\n    return ExperimentKind.GENAI_DEVELOPMENT;\n  }\n  if (experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED) {\n    return ExperimentKind.CUSTOM_MODEL_DEVELOPMENT;\n  }\n  return experimentKind;\n};\n\nexport const ExperimentKindDropdownLabels: Record<ExperimentKind, MessageDescriptor> = {\n  [ExperimentKind.GENAI_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'Label for experiments focused on generative AI model development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'Label for custom experiments focused on machine learning',\n  }),\n  [ExperimentKind.GENAI_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'Label for experiments automatically identified as generative AI development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'Label for custom experiments automatically identified as being focused on machine learning',\n  }),\n  [ExperimentKind.NO_INFERRED_TYPE]: defineMessage({\n    defaultMessage: 'None',\n    description: 'Label for experiments with no automatically inferred experiment type',\n  }),\n  [ExperimentKind.FINETUNING]: defineMessage({\n    defaultMessage: 'Finetuning',\n    description: 'Label for experiments focused on model finetuning',\n  }),\n  [ExperimentKind.REGRESSION]: defineMessage({\n    defaultMessage: 'Regression',\n    description: 'Label for experiments focused on regression modeling',\n  }),\n  [ExperimentKind.CLASSIFICATION]: defineMessage({\n    defaultMessage: 'Classification',\n    description: 'Label for experiments focused on classification modeling',\n  }),\n  [ExperimentKind.FORECASTING]: defineMessage({\n    defaultMessage: 'Forecasting',\n    description: 'Label for experiments focused on time series forecasting',\n  }),\n  [ExperimentKind.AUTOML]: defineMessage({\n    defaultMessage: 'AutoML',\n    description: 'Label for generic AutoML experiments',\n  }),\n  [ExperimentKind.EMPTY]: defineMessage({\n    defaultMessage: 'None',\n    description: 'Label for experiments with no experiment kind',\n  }),\n};\n\nexport const ExperimentKindShortLabels: Record<ExperimentKind, MessageDescriptor> = {\n  [ExperimentKind.GENAI_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'A short label for custom experiments focused on generative AI app and agent development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'A short label for custom experiments focused on machine learning',\n  }),\n  [ExperimentKind.GENAI_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description:\n      'A short label for custom experiments automatically identified as being focused on generative AI app and agent development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'A short label for custom experiments automatically identified as being focused on machine learning',\n  }),\n  [ExperimentKind.NO_INFERRED_TYPE]: defineMessage({\n    defaultMessage: 'None',\n    description: 'A short label for experiments with no automatically inferred experiment type',\n  }),\n  [ExperimentKind.FINETUNING]: defineMessage({\n    defaultMessage: 'finetuning',\n    description: 'A short label for experiments focused on model finetuning',\n  }),\n  [ExperimentKind.REGRESSION]: defineMessage({\n    defaultMessage: 'regression',\n    description: 'A short label for experiments focused on regression modeling',\n  }),\n  [ExperimentKind.CLASSIFICATION]: defineMessage({\n    defaultMessage: 'classification',\n    description: 'A short label for experiments focused on classification modeling',\n  }),\n  [ExperimentKind.FORECASTING]: defineMessage({\n    defaultMessage: 'forecasting',\n    description: 'A short label for experiments focused on time series forecasting',\n  }),\n  [ExperimentKind.AUTOML]: defineMessage({\n    defaultMessage: 'AutoML',\n    description: 'A short label for generic AutoML experiments',\n  }),\n  [ExperimentKind.EMPTY]: defineMessage({\n    defaultMessage: 'None',\n    description: 'A short label for experiments with no experiment kind',\n  }),\n};\n\n// Returns list of experiment kinds that are user-selectable in the dropdown\nexport const getSelectableExperimentKinds = () => [\n  ExperimentKind.GENAI_DEVELOPMENT,\n  ExperimentKind.CUSTOM_MODEL_DEVELOPMENT,\n];\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the artifact location after clicking on the icon\n */\nexport const ExperimentViewCopyArtifactLocation = ({ experiment }: { experiment: ExperimentEntity }) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size=\"md\"\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.artifactLocation,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy artifact location',\n              description: 'Copy tooltip to copy experiment artifact location from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Artifact location copied',\n              description: 'Tooltip displayed after experiment artifact location was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the experimentId after clicking on the icon\n */\nexport const ExperimentViewCopyExperimentId = ({ experiment }: { experiment: ExperimentEntity }) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size=\"md\"\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.experimentId,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy experiment id',\n              description: 'Copy tooltip to copy experiment id from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Experiment id copied',\n              description: 'Tooltip displayed after experiment id was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n"],"names":["module","exports","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","useInferExperimentKind","experimentId","isLoadingExperiment","enabled","experimentTags","updateExperimentKind","containsTraces","isLoading","isTracesBeingDetermined","useExperimentContainsTraces","data","useQuery","async","invariant","experimentIds","MlflowService","getExperimentTraces","Boolean","isEmpty","traces","isDismissed","setIsDismissed","useState","containsRuns","isTrainingRunsBeingDetermined","useExperimentContainsTrainingRuns","searchRuns","experiment_ids","max_results","useMemo","runs","inferredExperimentKind","ExperimentKind","GENAI_DEVELOPMENT_INFERRED","CUSTOM_MODEL_DEVELOPMENT_INFERRED","NO_INFERRED_TYPE","inferredExperimentPageTab","ExperimentPageTabName","Traces","Runs","useEffect","isEditableExperimentKind","kind","dismiss","_ref","styles","_ref2","_ref3","_ref4","ExperimentViewInferredKindPopover","children","onConfirm","onDismiss","isInferredKindEditable","intl","useIntl","theme","useDesignSystemTheme","_jsxs","css","Popover","Root","componentId","open","modal","_jsx","Trigger","asChild","Content","Arrow","_css","display","alignItems","gap","spacing","sm","Typography","Paragraph","FormattedMessage","id","defaultMessage","values","kindLabel","formatMessage","ExperimentKindShortLabels","isEditable","Button","onClick","type","size","icon","CloseIcon","ExperimentViewHeaderKindSelector","value","onChange","isUpdating","readOnly","dropdownItems","entries","ExperimentKindDropdownLabels","filter","key","getSelectableExperimentKinds","includes","currentValue","normalizeInferredExperimentKind","coerceToEnum","visibleLabel","getVisibleLabel","EMPTY","defineMessage","dropdownOpen","setDropdownOpen","displayInferencePopover","setDisplayInferencePopover","usingDropdown","tagElement","Tag","Spinner","ChevronDownIcon","tagElementWithTooltip","ExperimentTypeTooltip","dropdownElement","DropdownMenu","onOpenChange","align","Label","map","label","isSelected","CheckboxItem","checked","ItemIndicator","Tooltip","content","_converter","getMarkdownConverter","Converter","setFlavor","sanitizerOptions","allowedTags","allowedAttributes","img","div","sanitizeConvertedHtml","dirtyHtml","sanitizeHtml","forceAnchorTagNewTab","html","RegExp","useMarkdownConverter","useCallback","markdown","makeHtml","ExperimentViewInferredKindModal","selectedKind","setSelectedKind","CUSTOM_MODEL_DEVELOPMENT","Modal","visible","onCancel","title","cancelText","okText","onOk","flexDirection","marginBottom","Radio","GENAI_DEVELOPMENT","RunsTabConfig","ListIcon","getRoute","Routes","getExperimentPageTabRoute","TracesTabConfig","ListBorderIcon","ModelsTabConfig","ModelsIcon","Models","GenAIExperimentTabConfigMap","GenAIExperimentWithPromptsTabConfigMap","CustomExperimentTabConfigMap","DefaultTabConfigMap","TabSelectorBar","experimentKind","tabName","useParams","viewMode","useExperimentPageViewMode","topLevelTabName","tabNameFromRoute","useGetExperimentPageActiveTabByRoute","tabNameFromParams","Datasets","EvaluationRuns","LabelingSchemas","LabelingSessions","tabNameFromViewMode","isRunsViewTab","iTracesViewTab","activeTab","tabsConfig","shouldEnablePromptsTabOnDBPlatform","FORECASTING","REGRESSION","AUTOML","CLASSIFICATION","getExperimentTabsConfig","SegmentedControlGroup","newStyleFlagOverride","justifySelf","responsive","mediaQueries","xl","Object","tabConfig","isActive","React","Link","className","to","SegmentedControlButton","delayDuration","ExperimentViewHeaderV2","experiment","searchFacetsState","uiState","setEditing","experimentKindSelector","normalizedExperimentName","split","pop","getExperimentKindFromTags","tags","xs","Breadcrumb","includeTrailingCaret","breadcrumb","index","Item","overflow","minWidth","Title","withoutMargins","level","style","marginRight","InfoPopover","iconTitle","flexWrap","whiteSpace","ExperimentViewCopyTitle","ExperimentViewCopyExperimentId","ExperimentViewArtifactLocation","artifactLocation","ExperimentViewCopyArtifactLocation","justifyContent","marginLeft","ExperimentViewHeaderShareButton","_ref5","ExperimentViewHeaderV2Skeleton","ParagraphSkeleton","loading","TitleSkeleton","width","height","general","heightSm","alignSelf","lg","ExperimentPageRoutePathToTabNameMap","RoutePaths","experimentPageTabRuns","experimentPageTabTraces","experimentPageTabModels","routePath","pathname","useLocation","shouldEnableExperimentPageChildRoutes","_ExperimentPageRouteP","find","matchPath","getTabNameFromRoutePath","PreviewBadge","color","CopyBox","copyText","Input","CopyButton","GetLinkModal","link","ExperimentGetShareLinkModal","sharedStateUrl","setSharedStateUrl","linkInProgress","setLinkInProgress","generatedState","setGeneratedState","dispatch","useDispatch","stateToSerialize","createSerializedState","length","state","window","location","href","shouldUseCompressedExperimentViewSharedState","textCompressDeflate","JSON","stringify","serializePersistedState","hash","getStringSHA256","tagName","EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX","setExperimentTagApi","getShareableUrl","shareStateHash","route","getExperimentPageRoute","queryParams","URLSearchParams","set","EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY","EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY","params","toString","hashParam","startsWith","origin","Utils","logErrorAndNotifyUser","GenericSkeleton","placeholder","showGetLinkModal","setShowGetLinkModal","_Fragment","lazyPako","truncateToFirstLineWithMaxLength","str","maxLength","truncated","_","char","join","middleTruncateStr","maxLen","firstPartLen","Math","floor","lastPartLen","substring","_keyStr","btoaUtf8","input","output","i","result","_utf8_encode","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","atobUtf8","indexOf","String","fromCharCode","_utf8_decode","string","utftext","n","c2","c3","crypto","subtle","digest","TextEncoder","encode","then","arrayBuffer","Array","prototype","call","Uint8Array","x","slice","COMPRESSED_TEXT_DEFLATE_PREFIX","binaryData","deflate","text","Buffer","b64encoded","from","binaryString","byte","fromCodePoint","btoa","textDecompressDeflate","pako","compressedText","compressedTextWithoutPrefix","inflate","atob","m","_m$codePointAt","codePointAt","isTextCompressedDeflate","getExperimentPageDefaultViewMode","viewModeToRouteMap","MODELS","setParams","useSearchParams","navigate","useNavigate","get","setMode","newCompareRunsMode","_viewModeToRouteMap$n","currentParams","ExperimentViewHeader","showAddDescriptionButton","breadcrumbs","experimentsObservatoryRoute","PageHeader","wordBreak","textOverflow","verticalAlign","titleAddOns","background","colors","backgroundSecondary","border","Text","spacerSize","dangerouslyAppendEmotionCSS","h2","ExperimentViewHeaderSkeleton","md","showLabel","buttonProps","showTooltip","setShowTooltip","LegacyTooltip","dangerouslySetAntdProps","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","useUpdateExperimentKind","onSuccess","useMutation","mutationFn","setExperimentTag","experiment_id","_onSuccess","Promise","resolve","toolbarCommands","converter","getSanitizedHtmlContent","sanitized","ExperimentViewDescriptionNotes","editing","setShowAddDescriptionButton","onNoteUpdated","defaultValue","storedNote","useSelector","getExperimentTags","_Object$values$find","t","NOTE_CONTENT_TAG","extractNoteFromTags","effectiveNote","tmpNote","setTmpNote","selectedTab","setSelectedTab","isExpanded","setIsExpanded","COLLAPSE_MAX_HEIGHT","handleSubmitEditNote","updatedNote","action","lineHeight","typography","lineHeightLg","padding","flexGrow","overflowWrap","maxHeight","dangerouslySetInnerHTML","__html","PencilIcon","ChevronUpIcon","ReactMde","minEditorHeight","maxEditorHeight","minPreviewHeight","onTabChange","newTab","generateMarkdownPreview","getIcon","textPrimary","SvgIcon","GET_EXPERIMENT_QUERY","gql","useGetExperimentQuery","options","_data$mlflowGetExperi","apolloError","refetch","variables","skip","mlflowGetExperiment","apiError","getApiError","_data$mlflowGetExperi2","OverflowMenu","menu","overflowMenu","Menu","itemName","otherProps","Dropdown","overlay","trigger","placement","arrow","OverflowIcon","props","preview","hideSpacer","Header","buttons","Spacer","flexShrink","copyable","CopyIcon","tooltips","enumObj","fallback","v","ref","sizeMap","matchedSize","setMatchedSize","current","handleResize","elementWidth","offsetWidth","matchedKey","keys","sort","resizeObserver","ResizeObserver","observe","disconnect","SIDEBAR_WIDTHS","OverviewLayout","asideSections","isTabLayout","sidebarSize","verticalStackOrder","containerRef","useRef","stackVertically","useResponsiveContainer","small","breakpoints","verticalDisplayPrimaryContentOnTop","totalSidebarWidth","innerSidebarWidth","secondaryStackedStyles","borderBottom","paddingBottom","marginTop","SidebarWrapper","secondarySections","section","isTitleLoading","AsideSection","AsideSectionTitle","titleComponent","compactStyles","borderTop","KeyValueProperty","keyValue","maxWidth","textSecondary","flex","NoneCell","_experimentTags$find","tag","FINETUNING"],"sourceRoot":""}